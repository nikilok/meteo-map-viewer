[{"/Users/nikil/projects/meteo-map-viewer/src/App.js":"1"},{"size":2433,"mtime":1608171701073,"results":"2","hashOfConfig":"3"},{"filePath":"4","messages":"5","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"6"},"b50g99","/Users/nikil/projects/meteo-map-viewer/src/App.js",["7","8","9"],"import axios from \"axios\";\nimport axiosRetry from \"axios-retry\";\nimport qs from \"query-string\";\n\nimport { useEffect, useState } from \"react\";\n\nfunction App() {\n  const { event } = qs.parse(window.location.search);\n  const pollingRate = 30000;\n  const [lastEventId, setLastEventId] = useState(0);\n  const [url, setUrl] = useState(\"\");\n  axiosRetry(axios, { retries: 3 });\n\n  const getSimAirEvent = (eventId, id) => {\n    return axios.get(\n      `https://api.simair.io/v1/flights/${eventId}/events?lastEventId=${id}`\n    );\n  };\n\n  const setFlightData = (data) => {\n    const {\n      location: { coordinates },\n      altitude,\n      id,\n    } = data;\n    const altForMeteo = getAltitudeInMeters(altitude);\n\n    const [long, lat] = coordinates;\n    setLastEventId(id);\n    setUrl(\n      `https://www.meteoblue.com/en/weather/webmap/beta/bad-kreuznach_germany_2953416#coords=10/${lat}/${long}&map=windAnimation~coldwarm~auto~${altForMeteo}~none`\n    );\n  };\n\n  const getAltitudeInMeters = (altitude) => {\n    const altMeters = altitude * 0.3048;\n\n    switch (true) {\n      case altMeters <= 10:\n        return escape(\"10 m above gnd\");\n      case altMeters <= 128:\n        return escape(\"128 m above gnd\");\n      case altMeters <= 210:\n        return escape(\"210 m above gnd\");\n      case altMeters <= 250:\n        return escape(\"250 mb\");\n      case altMeters <= 307:\n        return escape(\"307 m above gnd\");\n      case altMeters <= 500:\n        return escape(\"500 mb\");\n      case altMeters <= 700:\n        return escape(\"700 mb\");\n      case altMeters <= 850:\n        return escape(\"850 mb\");\n      default:\n        return \"\";\n    }\n  };\n\n  const triggerDataFetch = async (event, lastEventId) => {\n    if (event) {\n      const { data } = await getSimAirEvent(event, lastEventId);\n      const lastEvent = data.length - 1;\n      if (data.length) {\n        setFlightData(data[lastEvent]);\n      }\n    }\n  };\n\n  useEffect(() => {\n    triggerDataFetch(event, lastEventId);\n  }, []);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      triggerDataFetch(event, lastEventId);\n    }, pollingRate);\n    return () => clearInterval(interval);\n  }, [lastEventId]);\n\n  return (\n    <div className=\"App\">\n      <iframe\n        src={url}\n        frameBorder=\"0\"\n        style={{ overflow: \"hidden\", height: \"100vh\", width: \"100%\" }}\n        height=\"100vh\"\n        width=\"100%\"\n      ></iframe>\n    </div>\n  );\n}\n\nexport default App;\n",{"ruleId":"10","severity":1,"message":"11","line":72,"column":6,"nodeType":"12","endLine":72,"endColumn":8,"suggestions":"13"},{"ruleId":"10","severity":1,"message":"14","line":79,"column":6,"nodeType":"12","endLine":79,"endColumn":19,"suggestions":"15"},{"ruleId":"16","severity":1,"message":"17","line":83,"column":7,"nodeType":"18","endLine":89,"endColumn":8},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'event', 'lastEventId', and 'triggerDataFetch'. Either include them or remove the dependency array.","ArrayExpression",["19"],"React Hook useEffect has missing dependencies: 'event' and 'triggerDataFetch'. Either include them or remove the dependency array.",["20"],"jsx-a11y/iframe-has-title","<iframe> elements must have a unique title property.","JSXOpeningElement",{"desc":"21","fix":"22"},{"desc":"21","fix":"23"},"Update the dependencies array to be: [event, lastEventId, triggerDataFetch]",{"range":"24","text":"25"},{"range":"26","text":"25"},[1973,1975],"[event, lastEventId, triggerDataFetch]",[2152,2165]]